{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x2918e4f9a88DC48F781b276944c23aDa6d5d8513",
      "txHash": "0x289518d3c07ccd400b4f3f17ac66701223a2d99de15e5db9be4803536a98d328",
      "kind": "transparent"
    }
  ],
  "impls": {
    "c8bb69c2cd09bec96b27affe71c51d336b34873aab6a9eb1871b7e1a12c6a4a4": {
      "address": "0xC94cb8C99Ffc598932CcDA92FD2e1E8b54BBc854",
      "txHash": "0x5208780fcccc10f37e1dd51ac1559a237f69295c26bb4a7057b17b57531344fd",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "m_pocoDelegate",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IExecPocoDelegate)5308",
            "contract": "ManageOrders",
            "src": "contracts/protectedDataSharing/ManageOrders.sol:34"
          },
          {
            "label": "iexec_result_storage_provider",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage",
            "contract": "ManageOrders",
            "src": "contracts/protectedDataSharing/ManageOrders.sol:38"
          },
          {
            "label": "iexec_result_storage_proxy",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage",
            "contract": "ManageOrders",
            "src": "contracts/protectedDataSharing/ManageOrders.sol:39"
          },
          {
            "label": "protectedDataRegistry",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IRegistry)5392",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:37"
          },
          {
            "label": "appRegistry",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IRegistry)5392",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:38"
          },
          {
            "label": "_nextCollectionId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:39"
          },
          {
            "label": "protectedDatas",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_mapping(t_uint160,t_address))",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:41"
          },
          {
            "label": "appForProtectedData",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_address))",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:43"
          },
          {
            "label": "protectedDataInSubscription",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:47"
          },
          {
            "label": "subscribers",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint48))",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:49"
          },
          {
            "label": "subscriptionParams",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(SubscriptionParams)5468_storage)",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:51"
          },
          {
            "label": "lastSubscriptionExpiration",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_uint48)",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:53"
          },
          {
            "label": "protectedDataForRenting",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(RentingParams)5402_storage))",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:57"
          },
          {
            "label": "renters",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint48))",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:59"
          },
          {
            "label": "lastRentalExpiration",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint48)",
            "contract": "ProtectedDataSharing",
            "src": "contracts/protectedDataSharing/ProtectedDataSharing.sol:61"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AccessControlStorage)34_storage": {
            "label": "struct AccessControlUpgradeable.AccessControlStorage",
            "members": [
              {
                "label": "_roles",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ERC721Storage)191_storage": {
            "label": "struct ERC721Upgradeable.ERC721Storage",
            "members": [
              {
                "label": "_name",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_symbol",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(InitializableStorage)93_storage": {
            "label": "struct Initializable.InitializableStorage",
            "members": [
              {
                "label": "_initialized",
                "type": "t_uint64",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "_initializing",
                "type": "t_bool",
                "offset": 8,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_contract(IExecPocoDelegate)5308": {
            "label": "contract IExecPocoDelegate",
            "numberOfBytes": "20"
          },
          "t_contract(IRegistry)5392": {
            "label": "contract IRegistry",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint48))": {
            "label": "mapping(address => mapping(address => uint48))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(RentingParams)5402_storage)": {
            "label": "mapping(address => struct IRental.RentingParams)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint48)": {
            "label": "mapping(address => uint48)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint160,t_address)": {
            "label": "mapping(uint160 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
            "label": "mapping(uint256 => mapping(address => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
            "label": "mapping(uint256 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(RentingParams)5402_storage))": {
            "label": "mapping(uint256 => mapping(address => struct IRental.RentingParams))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint48))": {
            "label": "mapping(uint256 => mapping(address => uint48))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_uint160,t_address))": {
            "label": "mapping(uint256 => mapping(uint160 => address))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(SubscriptionParams)5468_storage)": {
            "label": "mapping(uint256 => struct ISubscription.SubscriptionParams)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint48)": {
            "label": "mapping(uint256 => uint48)",
            "numberOfBytes": "32"
          },
          "t_struct(RentingParams)5402_storage": {
            "label": "struct IRental.RentingParams",
            "members": [
              {
                "label": "isForRent",
                "type": "t_bool",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "price",
                "type": "t_uint112",
                "offset": 1,
                "slot": "0"
              },
              {
                "label": "duration",
                "type": "t_uint48",
                "offset": 15,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(SubscriptionParams)5468_storage": {
            "label": "struct ISubscription.SubscriptionParams",
            "members": [
              {
                "label": "price",
                "type": "t_uint112",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "duration",
                "type": "t_uint48",
                "offset": 14,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint112": {
            "label": "uint112",
            "numberOfBytes": "14"
          },
          "t_uint160": {
            "label": "uint160",
            "numberOfBytes": "20"
          },
          "t_uint48": {
            "label": "uint48",
            "numberOfBytes": "6"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61",
              "offset": 0,
              "slot": "0"
            }
          ],
          "erc7201:openzeppelin.storage.ERC721": [
            {
              "contract": "ERC721Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30",
              "offset": 0,
              "slot": "1"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32",
              "offset": 0,
              "slot": "2"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34",
              "offset": 0,
              "slot": "3"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36",
              "offset": 0,
              "slot": "4"
            },
            {
              "contract": "ERC721Upgradeable",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38",
              "offset": 0,
              "slot": "5"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69",
              "offset": 0,
              "slot": "0"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73",
              "offset": 8,
              "slot": "0"
            }
          ]
        }
      }
    }
  }
}
